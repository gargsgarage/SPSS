/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.util.ArrayList;
import java.util.List;

/*This class represents a project submission server for projects of a certain class. It holds
 * information on the project submissions for each student in the class. Additionally, this 
 * class uses threads to concurrently process multiple submissions from students. Some functions 
 * of the class are to add students, add submissions for students, find out if a student can get
 * extra credit, and seeing the number of submissions a student makes.*/
public class SPSS extends Thread{

	private int numTests;
	private ArrayList<Student> students = new ArrayList<Student>();
	
	
    public SPSS(int numTests) {
    	if (numTests <= 0) {
    		this.numTests = 1;
    	}
    	else {
    		this.numTests = numTests;
    	}
    }

    /*This method adds a student with name @param newStudent to the ArrayList
     * of students in the object. if a student with name @param newStudent 
     * already exists in the class however, it will not add the student to 
     * the ArrayList.*/
    public boolean addStudent(String newStudent) {
    	//validate if student exists
    	if (newStudent == null || newStudent.equals("")) {
    		return false;
    	}
    	
    	//check if the student already exists in the ArrayList of students in the course
    	for (int i = 0; i < students.size(); i++) {
    		if (students.get(i).hasName(newStudent)) {
    			return false;
    		}
    	}
    	
    	//add the new student to the arrayList
    	students.add(new Student(newStudent, numTests));
    	return true;
	}

    /*This method returns the number of student in the submission
     * server for a specific class.*/
    public int numStudents() {
    	return students.size();
    }

    /*This method adds a submsission for a student in the ArrayList with name
     * @param name and test results @param testResults. If the student isn't 
     * registered in the submit server however, it will not add a submission
     * for that student. The method also makes sure that submission follows the
     * submission guidelines before adding the submission for the student.*/
    public boolean addSubmission(String name, List<Integer> testResults) {
    	if (name == null || name.equals("")) {
    		return false;
    	}
    	//check if there is a student registered with param name
    	boolean isNameRegistered = false;
    	Student currStudent = null;
    	for (int i = 0; i < students.size(); i++) {
    		if (students.get(i).hasName(name)) {
    			isNameRegistered = true;
    			currStudent = students.get(i);
    		}
    	}
    	
    	//if the student isn't already registered, return false
    	if (!isNameRegistered) {
    		return false;
    	}
    	
    	//if the parameter testResults is null, return false
    	if (testResults == null) {
    		return false;
    	}
    	
    	//if the parameter testResults ins't the same size as numTests,
    	//return false
    	if (testResults.size() != numTests) {
    		return false;
    	}
    	
    	//check for negative elements
    	for (int i = 0; i < testResults.size(); i++) {
    		if (testResults.get(i) < 0) {
    			return false;
    		}
    	}
    	
    	//replace the current student's best submission with the new testResults
    	//and increment the number of submissions
		currStudent.replaceBestSubmission(testResults);
    	currStudent.incrementNumSubmissions();
		return true;
    }

    /*This method uses threads to concurrently add submissions to the submit server.
     * It does this by reading in each file in the list @param fileNames, then reads
     * each line of each file (simultaneously) and extracts the information necessary to
     * make a submission for the specified student. */
    public boolean readSubmissionsConcurrently(List<String> fileNames) {
        // Check if @param is null
        if (fileNames == null) {
            return false;
        }
    
        // List to keep track of all threads
        List<ThreadOperator> threads = new ArrayList<>();
    
        // Start each thread and add it to the list
        for (String file : fileNames) {
            ThreadOperator t = new ThreadOperator(this, file);
            t.start();
            threads.add(t);
        }
    
        // Wait for all threads to finish
        for (ThreadOperator t : threads) {
            try {
                t.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
                return false; // or handle it as needed
            }
        }
    
        return true;
    }
    
    

    /*This method returns the sum of the tests for the best submission
     * that the student with name @param name made so far. It first validates
     * that the student exists in the ArrayList, then if it does, it returns that
     * student's  summed up test scores.*/
    public int score(String name) {
    	//validate if the student exists in they system
    	if (name == null || name.equals("")) {
    		return -1;
    	}
    	//check if the student is registered in the course's submission server
    	boolean isNameRegistered = false;
    	Student currStudent = null;
    	for (int i = 0; i < students.size(); i++) {
    		if (students.get(i).hasName(name)) {
    			isNameRegistered = true;
    			currStudent = students.get(i);
    		}
    	}
    	
    	//if the student doesn't exist in the course's submission server,
    	//return false
    	if (!isNameRegistered) {
    		return -1;
    	}
    	
    	//return the sum of the students test scores of their best submission
    	return currStudent.getBestTestScore();
    }

    /*this method finds the student with name @param name and returns the 
     * number of submissions that student made. if a student with name @param
     * name doesn't exist in the ArrayList, it returns -1.*/
    public int numSubmissions(String name) {
    	//validate if the student exists in they system
    	if (name == null || name.equals("")) {
    		return -1;
    	}
    	
    	//check if the student is registered in the course's submission server
    	boolean isNameRegistered = false;
    	Student currStudent = null;
    	for (int i = 0; i < students.size(); i++) {
    		if (students.get(i).hasName(name)) {
    			isNameRegistered = true;
    			currStudent = students.get(i);
    		}
    	}
    	if (!isNameRegistered) {
    		return -1;
    	}
    	
    	//return the number of submissions for that student
    	return currStudent.getNumSubmissions(); 
	}

    /*Similar to the method above, this method returns the sum of the
     * number of submissions for all students in the ArrayList. */
    public int numSubmissions() {
    	//sum up every students submissions
    	int sum = 0;
    	for (int i = 0 ; i < students.size(); i++) {
    		sum += students.get(i).getNumSubmissions();
    	}
    	//return that sum
    	return sum;
	}

    /*This method checks if a student with name @param name has passed
     * the minimum requirements to pass the course. The requirement is that
     * the student must have passed half or more of the tests, meaning they got
     * above a 0 on at least half of the tests.*/
    public boolean satisfactory(String name) {

    	//validate if the student exists
    	if (name == null || name.equals("")) {
    		return false;
    	}
    	
    	//check if the student is registered in the course's submission server
    	boolean isNameRegistered = false;
    	Student currStudent = null;
    	for (int i = 0; i < students.size(); i++) {
    		if (students.get(i).hasName(name)) {
    			isNameRegistered = true;
    			currStudent = students.get(i);
    		}
    	}
    	if (!isNameRegistered) {
    		return false;
    	}
    	
    	//check how many tests are above 0 (passed)
    	int numPassedTests = currStudent.getNumPassedTests();
    	
    	//check if the number of tests passed is at least half
    	if (numTests % 2 == 0) {
    		if (numPassedTests >= numTests/2) {
    			return true;
    		}
    		return false;
    	}
    	else {
    		if (numPassedTests > numTests/2) {
    			return true;
    		}
    		return false;
    	}
	}

    /*This method checks if the student with name @param name is 
     * eligible for extraCredit. A student is eligible for extra
     * credit if the number of submissions the student has made is
     * exactly 1, and the student passed every test in the project.
     * If both of these conditions are satisfied, then the method 
     * returns true.*/
    public boolean gotExtraCredit(String name) {
    	//validate if the student exists
    	if (name == null || name.equals("")) {
    		return false;
    	}
    	
    	//check if the student is registered in the course's submission server
    	boolean isNameRegistered = false;
    	Student currStudent = null;
    	for (int i = 0; i < students.size(); i++) {
    		if (students.get(i).hasName(name)) {
    			isNameRegistered = true;
    			currStudent = students.get(i);
    		}
    	}
    	if (!isNameRegistered) {
    		return false;
    	}
    	
    	//check if the number of submissions the student made is exactly 1
    	if (currStudent.getNumSubmissions() > 1) {
    		return false;
    	}
    	
    	//check if all of the tests passed
    	int numPassedTests = currStudent.getNumPassedTests();
    	
    	if (numPassedTests == numTests) {
    		return true;
    	}
    	return false;
	}

}

